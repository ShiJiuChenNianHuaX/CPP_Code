//一个对象的或者变量没有初始状态，对其使用后果是未知
//同样的使用完一个对象或变量，没有及时清理，野湖造成安全问题
/*C++利用构造函数和析构函数解决上述问题，这两个函数由编译器自动调用，完成对象初始化和清理工作。
对象的初始化和清理工作是编译器强制要求我们做的事情，因此如果我们不提供构造和析构，编译器会提供编译器提供
的构造函数和析构函数。*/
//构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器的自动调用，无须手动调用
//构造函数：主要作用在于对象销毁前系统自动调用，执行一些清理工作
/*构造函数语法：类名(){}
1、构造函数
2、函数名称与类名相同
3、构造函数可以有参数，因此可以发生重载
4、程序在调用对象的时候会自动调用构造，无须手动调用，而且只会调用一次
*/
/*析构函数语法：~类名(){}
1、构造函数，没有返回值也不写void
2、函数名称与类名相同，在名称前要加上~
3、析构函数不可以有参数，因此不可以发生重载
4、程序在对象销毁前会自动调用析构，无须手动调用，而且只会调用一次
*/
#include <iostream>
using namespace std;
#include <string>

//1、构造函数进行初始化操作
class Person
{
public:
    //1、构造函数
    Person()
    {
        cout << "这是一个构造函数的调用" << endl;
    }
    ~Person()
    {
        cout << "这是一个析构函数的调用" << endl;
    }
};

//2、析构函数进行清理的操作


//构造和析构都是必须有的实现，如果我们自己不提供，编译器会提供一个空实现的构造和析构
void test01()
{
    Person p;//只创建了一个对象，没有调用Person()构造函数
    // p对象创建在了栈上，test01执行完毕后就会释放这个对象
}
int main()
{
    //test01();
    Person p;//只调用了构造函数没有调用析构，原因在于对象创建在main函数里不会被释放
    /*因为Person p;执行完成后执行system("pause");在执行完了整个main函数按任意键
    之后才会执行释放p对象的释放操作，然后才执行析构函数的代码*/
    system("pause");
    return 0;
}